<%= form_with(model: @practice, class: 'card') do |form| %>
  <div class="card-body" data-controller="timer">
    <!-- Stopwatch -->
    <% if @practice.new_record? %>

      <div id="stopwatch" class="bg-primary rounded mb-3">
        <div class="timerDisplay text-light bg-dark p-2 rounded text-monospace fs-1" data-timer-target='display'>
          00 : 00 : 00 : 000
        </div>
        <div class="d-flex justify-content-center" aria-label="Timer controls">
          <button type="button" class="btn btn-primary me-2" data-action="timer#startTimer" data-timer-target="startButton"><i class="bi bi-play-circle-fill"></i> Start</button>
          <button type="button" class="btn btn-primary me-2" data-action="timer#resumeTimer" data-timer-target="resumeButton"><i class="bi bi-play-circle-fill"></i> Resume</button>
          <button type="button" class="btn btn-secondary me-2" data-action="timer#pauseTimer" data-timer-target="pauseButton"><i class="bi bi-pause-circle"></i> Pause</button>
          <button type="button" class="btn btn-danger"  data-action="timer#resetTimer" data-timer-target="resetButton"><i class="bi bi-x-circle"></i> Reset</button>
        </div>
        <p class="text-warning">The restart button currently malfunctions, so don't use it. You can still pause to edit the minutes before submitting.</p>
        <%# <div class="timerControls buttons text-center p-1 bg-secondary">
          <button type="button" id="startTimer" class="btn btn-primary me-2" type="button" data-action="click->timer#startTimer"><i class="bi bi-play-circle-fill"></i> Start</button>
          <button type="button" id="pauseTimer" class="btn btn-success me-2 hidden d-none" type="button">Pause</button>
          <button type="button" id="resetTimer" class="btn btn-danger" type="button">Reset</button>
        </div> %>
      </div>
    <% end %>

    <!-- Practice date and minutes -->
    <div class="row mb-3">
      <div class="col-md-6">
        <%= form.label :practice_date, class: 'form-label' %>
        <%= form.datetime_field :practice_date, class: 'form-control' %>
      </div>
      <div class="col-md-6">
        <%= form.label :minutes, class: "form-label" %>
        <%= form.number_field :minutes, class: 'form-control', data: { 'timer-target': 'minutes' } %>
      </div>
    </div>


    <!-- Focus and song -->
    <div class="row mb-3">
      <% if current_user.foci.present? %>
        <div class="col-md-6">
          <%= form.label :focus_id, class: 'form-label' %>
          <%= form.select :focus_id, current_user.foci.order(:short_description).map { |t| [t.short_description, t.id]}, { include_blank: "Choose a focus for this practice if you wish" }, class: "form-control" %>
        </div>
      <% end %>
      <% if current_user.songs.present? %>
        <div class="col-md-6" data-controller="song">
          <%= form.label :song_id, class: 'form-label' %>
          <%= form.select :song_id, current_user.songs.order(:title).map { |t| [t.title, t.id]}, { include_blank: "Choose a song for this practice if you wish" }, { class: 'form-select', data: { action: 'change->song#change' } } %>
        </div>
      <% end %>
    </div>

    <!-- Notes -->
    <div class="mb-3">
      <%= form.label :notes, class: 'form-label' %>
      <%= form.text_area :notes, class: 'form-control' %>
    </div>

    <!-- Submit and cancel buttons -->
    <div class="d-flex justify-content-end">
      <%= form.submit class: "btn btn-info btn-lg me-2" %>
      <%= link_to "Cancel", practice_path(@practice), class: "btn btn-secondary btn-lg", data: { turbo: 'cancel' } unless @practice.new_record? %>
      <%= link_to "Cancel", practices_path, class: "btn btn-secondary btn-lg", data: { turbo: 'cancel' } if @practice.new_record? %>
    </div>
  </div>

  <div class="mb-3 px-3">
    <turbo-frame id="lyrics">
    </turbo-frame>
  </div>

<script type='application/javascript'>
  console.log('practices/_form.js')

  function startTimer() {
    console.log('startTimer');
    let start = Date.now();
    let end = Date.now();

    let [milliseconds, seconds, minutes, hours] = [0, 0, <%= @practice.minutes %>, 0];
    let timerRef = document.querySelector('.timerDisplay');
    let int = null;
    let minutesRef = document.getElementById('practice_minutes');

    function displayTimer() {
      end = Date.now();
      let elapsed = end - start;
      let elapsedMinutes = Math.floor(elapsed / 60000);
      hours = Math.floor(elapsedMinutes / 60);
      minutes = elapsedMinutes % 60;
      seconds = Math.floor((elapsed % 60000) / 1000);
      milliseconds = elapsed % 1000;
      // show hours, minutes, and seconds as two digits
      hours = hours.toString().padStart(2, '0');
      minutes = minutes.toString().padStart(2, '0');
      seconds = seconds.toString().padStart(2, '0');
      // show milliseconds as three digits
      milliseconds = milliseconds.toString().padStart(3, '0');
      timerRef.innerHTML = ` ${hours} : ${minutes} : ${seconds} : ${milliseconds}`;
      minutesRef.value = elapsedMinutes;
    }

    int = setInterval(displayTimer, 10);

    return int;
  }

  function stopTimer(int) {
    clearInterval(int);
  }

  function resetTimer() {
    let [milliseconds, seconds, minutes, hours] = [0, 0, 0, 0];
    let timerRef = document.querySelector('.timerDisplay');
    let minutesRef = document.getElementById('practice_minutes');
    timerRef.innerHTML = '00 : 00 : 00 : 000 ';
    minutesRef.value = 0;
  }

  document.addEventListener('turbo:DOMContentLoaded', () => {
    let int = startTimer();
    console.log('turbo:load');

    let startButton = document.getElementById('startTimer');
    if (startButton) {
      console.log('startButton');
      startButton.addEventListener('click', () => {
        int = startTimer();
      });
    }

    let pauseButton = document.getElementById('pauseTimer');
    if (pauseButton) {
      console.log('pauseButton');
      pauseButton.addEventListener('click', () => {
        stopTimer(int);
      });
    }

    let resetButton = document.getElementById('resetTimer');
    if (resetButton) {
      console.log('resetButton');
      resetButton.addEventListener('click', () => {
        stopTimer(int);
        resetTimer();
      });
    }
    else {
      console.log('no resetButton');}
  });
</script>

<% end %>
